/**
 * 
 */
package com.rayy.android.dialer;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Set;

import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.database.DataSetObserver;
import android.graphics.drawable.Drawable;
import android.os.Bundle;
import android.preference.PreferenceManager;
import android.support.v4.app.DialogFragment;
import android.support.v4.app.FragmentManager;
import android.util.Log;
import android.view.View;
import android.view.ViewGroup;
import android.view.animation.AlphaAnimation;
import android.view.animation.Animation;
import android.view.animation.AnimationSet;
import android.view.animation.LayoutAnimationController;
import android.view.animation.TranslateAnimation;
import android.widget.ArrayAdapter;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.ListAdapter;
import android.widget.ListView;
import android.widget.TextView;

import com.actionbarsherlock.app.ActionBar;
import com.actionbarsherlock.app.SherlockFragmentActivity;
import com.actionbarsherlock.view.Menu;
import com.actionbarsherlock.view.MenuItem;
import com.rayy.android.dialer.SimpleTextDialog.OnTextSetListener;

/**
 * @author RAY
 *
 */
public class PackageListing extends SherlockFragmentActivity implements ActionBar.OnNavigationListener, OnTextSetListener{
	private static final String tag = "PackageListing";
	private static int FILTER_SYSTEM = 1, FILTER_NULL_LAUNCHER = 3, FILTER_DEFINED = 2, FILTER_NON_SYS = 0;
	//private static int TYPE_NEW = 20, TYPE_MOD = 21;
	private static int DIAG_SET = 5;
	private static Context mContext;
	private int posTag;
	private String pkgName, shortNum;
	private String[] filter;
	private SharedPreferences pref;
	private PackageManager pm;
	private List<ApplicationInfo> appInfoList;
	private List<HashMap<String, Object>> appMapList;
	private ListView lv;
	private int appCount = 0;

	public void onCreate (Bundle savedInstanceState){
		super.onCreate(savedInstanceState);
		
		//this.setTheme(R.styleable.SherlockActionBar_background);
		setContentView(R.layout.gen_list);
		
		mContext = PackageListing.this;
		
		pref = PreferenceManager.getDefaultSharedPreferences(mContext);
		
		filter = getResources().getStringArray(R.array.filter);
		
		Context tempContext = getSupportActionBar().getThemedContext();
        ArrayAdapter<CharSequence> filterList = ArrayAdapter.createFromResource(tempContext, R.array.filter, R.layout.sherlock_spinner_item);
        filterList.setDropDownViewResource(R.layout.sherlock_spinner_dropdown_item);

        getSupportActionBar().setNavigationMode(ActionBar.NAVIGATION_MODE_LIST);
        getSupportActionBar().setListNavigationCallbacks(filterList, this);
        getSupportActionBar().setDisplayShowTitleEnabled(false);
		
		lv = (ListView) findViewById(R.id.lv_pkg);
		lv.setMinimumHeight(100);
		AnimationSet set = new AnimationSet(true);
		Animation animation = new AlphaAnimation(0.0f, 1.0f);
		animation.setDuration(50);
		set.addAnimation(animation);
		animation = new TranslateAnimation(
		                Animation.RELATIVE_TO_SELF, 0.0f,Animation.RELATIVE_TO_SELF, 0.0f,
		                Animation.RELATIVE_TO_SELF, -1.0f,Animation.RELATIVE_TO_SELF, 0.0f
		            );
		animation.setDuration(80);
		set.addAnimation(animation);
		LayoutAnimationController controller = new LayoutAnimationController(set, 0.5f);
		lv.setLayoutAnimation(controller);
		
		pm = getPackageManager();
	}
	
	protected void saveNumber(String num) {
		// TODO Auto-generated method stub
		SharedPreferences.Editor editor = pref.edit();
		
		if (num.equalsIgnoreCase("")){
			if (pref.contains(pkgName)){
				editor.remove(pkgName);
			}
		}
		else 
			editor.putString(pkgName, num);
		
		editor.commit();
		
		Log.i(tag, "Saved " + num + " for " + pkgName);
	}
	
	public void setNumber(View v){
		posTag = (Integer) v.getTag();
		pkgName = String.valueOf(appMapList.get(posTag).get("pkg_name"));
		shortNum = pref.getString(pkgName, "");
		
		Log.i(tag, pkgName + "-" + shortNum);
		
		//showDialog(DIAG_SET);
		FragmentManager fragMngr = getSupportFragmentManager();
		//FragmentTransaction ft = fragMngr.beginTransaction();
		DialogFragment frag = new SimpleTextDialog(shortNum);
		frag.show(fragMngr, "n_dialog");
	}
	
	@Override
	public void onTextSet(String str) {
		// TODO Auto-generated method stub
		saveNumber(str);
		onNavigationItemSelected(getSupportActionBar().getSelectedNavigationIndex(), 1);		
	}
	
	public void updateAppList (){
		appMapList = new ArrayList<HashMap<String, Object>> ();
		
		for (ApplicationInfo ai: appInfoList){
			HashMap<String, Object> map = new HashMap<String, Object>();
			String pkg = ai.packageName;
			
			map.put("app_icon", ai.loadIcon(pm));
			map.put("app_name", ai.loadLabel(pm));
			map.put("pkg_name", pkg);
			map.put("launch_intent", pm.getLaunchIntentForPackage(pkg));
			
			if (pref.contains(pkg))
				map.put("short_cut", pref.getString(pkg, ""));
			else
				map.put("short_cut", "");
			
			//Order by name
			
			appMapList.add(map);
		}
	}

	@Override
	public boolean onNavigationItemSelected(int itemPosition, long itemId) {
		// TODO Auto-generated method stub
		switch (itemPosition){
		case 0: // all packages
			appInfoList = getInstalledPackages(pm, FILTER_NON_SYS);
			Log.i(tag, appInfoList.size() + "///");
			break;
		case 1: // system apps
			appInfoList = getInstalledPackages(pm, FILTER_SYSTEM);
			Log.i(tag, appInfoList.size() + "");
			break;
		case 2: // defined
			appInfoList = getInstalledPackages(pm, FILTER_DEFINED);
			Log.i(tag, appInfoList.size() + "");
			break;
		default:
			break;
		}
		
		Collections.sort(appInfoList, new ApplicationInfo.DisplayNameComparator(pm));
		updateAppList();
		//lv.setAdapter(null);
		MyItemAdapter mia = new MyItemAdapter(mContext, appMapList);
		lv.setAdapter(mia);
		//lv.startLayoutAnimation();
		
		return false;
	}
	
	/*protected Dialog onCreateDialog(int id) {
	    Dialog diag;
	    
	    switch(id) {
	    case 5:
	        // do the work to define the pause Dialog
	    	AlertDialog.Builder builder = new AlertDialog.Builder(mContext);
	    	LayoutInflater inflater = (LayoutInflater) this.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
			final EditText diag_view = (EditText) inflater.inflate(R.layout.diag_set, null);
			diag_view.setText(shortNum);
			//diag_view.setPadding(10, 2, 10, 2);
			//diag_view.setLayoutParams(new LayoutParams(ViewGroup.LayoutParams.FILL_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT));
	    	builder.setView(diag_view);
	    	builder.setTitle(getString(R.string.title_set_number));
	    	builder.setPositiveButton(android.R.string.ok, new OnClickListener(){

				@Override
				public void onClick(DialogInterface dialog, int which) {
					// TODO Auto-generated method stub
					saveNumber(diag_view.getText().toString());
				}
	    		
	    	});

	    	diag = builder.create();
	    	//diag.setContentView(R.layout.diag_set);
	    	//diag.setTitle(getString(R.string.title_set_number));
	    	
	        break;

	    default:
	        diag = null;
	    }
	    
	    return diag;
	}*/

	protected List<ApplicationInfo> getInstalledPackages (PackageManager pm, int filter){
    	List<ApplicationInfo> packages = pm.getInstalledApplications(PackageManager.GET_META_DATA);
    	List<Integer> toRemove = new ArrayList<Integer>();
    	List<Integer> toFilter = new ArrayList<Integer>();
        
        // remove empty launch intent.
        /*for (int r = 0; r < packages.size(); r ++){
        	Intent launchIntent = pm.getLaunchIntentForPackage(packages.get(r).packageName);
        	
        	if (launchIntent == null){		        	
        		toFilter.add(r);
        		Log.i("launchIntent", "remove package with null launch intent " + r);
        	}
        }
        
        for (int s = 0; s < toFilter.size(); s ++){
        	int t = toFilter.get(s).intValue();
        	packages.remove(t - s);
        }*/

        for (int i = 0; i < packages.size(); i ++){
        	ApplicationInfo appInfo = packages.get(i);
        	
        	Intent launchIntent = pm.getLaunchIntentForPackage(appInfo.packageName);
        	
        	if (launchIntent == null){		        	
        		toRemove.add(i);
        		Log.i("launchIntent", "remove package with null launch intent " + i);
        		
        		continue;
        	}
        	
        	if (filter == FILTER_NON_SYS){
        		if((appInfo.flags & ApplicationInfo.FLAG_SYSTEM)!=0){
        			Log.i(tag, ">>>>>>system package " + appInfo.packageName);
        			toRemove.add(i);
        		}
        	}
        	
        	else if (filter == FILTER_SYSTEM){
        		if((appInfo.flags & ApplicationInfo.FLAG_SYSTEM) == 0){
        			Log.i(tag, ">>>>>>non system package " + appInfo.packageName);
        			toRemove.add(i);
        		}
        	}
        	
        	else if (filter == FILTER_DEFINED){
        		Set<String> defined = pref.getAll().keySet();
        		
        		Log.i(tag, "keyset size: " + defined.size());
        		
        		if (!defined.contains(appInfo.packageName)){
        			Log.i(tag, ">>>>>not defined yet" + appInfo.packageName);
        			toRemove.add(i);
        		}
        	}

            //Log.i(TAG,"Installed package :"+ appInfo.packageName);
            //Log.i(TAG,"Launch Activity :"+ pm.getLaunchIntentForPackage(appInfo.packageName)); 
           
        }
        
        Log.i(tag, "To be removed: " + toRemove.size());
        
        for (int j = 0; j < toRemove.size(); j ++){
        	int k = toRemove.get(j).intValue();
        	Log.i(tag, k + " /// ");
        	packages.remove(k - j);
        }
        
        //appCount = packages.size();
        
        return packages;
    }
	
	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
	   com.actionbarsherlock.view.MenuInflater inflater = getSupportMenuInflater();
	   inflater.inflate(R.menu.menu, (com.actionbarsherlock.view.Menu) menu);
	   return super.onCreateOptionsMenu(menu);
	}
	
	public boolean onOptionsItemSelected(MenuItem item) 
	{
	    int id = item.getItemId();

	    if (id == R.id.info) {
	    	FragmentManager fragMngr = getSupportFragmentManager();
			DialogFragment frag = new InfoDialog(getString(R.string.info_text));
			frag.show(fragMngr, "m_dialog");
	    } 
	    
	    return false;
	}

	class MyItemAdapter implements ListAdapter {
		List<HashMap<String, Object>> appList = new ArrayList<HashMap<String, Object>> ();
		Context mContext;
		
		public MyItemAdapter (Context mContext, List<HashMap<String, Object>> appList){
			this.mContext = mContext;
			this.appList = appList;
		}

		@Override
		public int getCount() {
			// TODO Auto-generated method stub
			return appList.size();
		}

		@Override
		public Object getItem(int arg0) {
			// TODO Auto-generated method stub
			return appList.get(arg0);
		}

		@Override
		public long getItemId(int arg0) {
			// TODO Auto-generated method stub
			return 0;
		}

		@Override
		public int getItemViewType(int arg0) {
			// TODO Auto-generated method stub
			return 0;
		}

		@Override
		public View getView(int pos, View arg1, ViewGroup arg2) {
			// TODO Auto-generated method stub
			/*if (arg1 != null){
				return arg1;
			}*/

			View v = View.inflate(mContext, R.layout.pkg_list_item, null);
			ImageView iv = (ImageView) v.findViewById(R.id.app_icon);
			iv.setImageDrawable((Drawable) appList.get(pos).get("app_icon"));
			TextView tv = (TextView) v.findViewById(R.id.app_name);
			tv.setText((CharSequence) appList.get(pos).get("app_name"));
			TextView tv2 = (TextView) v.findViewById(R.id.pkg_name);
			tv2.setText((CharSequence) appList.get(pos).get("pkg_name"));
			TextView tv3 = (TextView) v.findViewById(R.id.tv_num);
			tv3.setText((CharSequence) appList.get(pos).get("short_cut"));
			ImageButton btn = (ImageButton) v.findViewById(R.id.btn_set);
			btn.setTag(pos);
			
			return v;
		}

		@Override
		public int getViewTypeCount() {
			// TODO Auto-generated method stub
			return 1;
		}

		@Override
		public boolean hasStableIds() {
			// TODO Auto-generated method stub
			return false;
		}

		@Override
		public boolean isEmpty() {
			// TODO Auto-generated method stub
			return false;
		}

		@Override
		public void registerDataSetObserver(DataSetObserver arg0) {
			// TODO Auto-generated method stub
			
		}

		@Override
		public void unregisterDataSetObserver(DataSetObserver arg0) {
			// TODO Auto-generated method stub
			
		}

		@Override
		public boolean areAllItemsEnabled() {
			// TODO Auto-generated method stub
			return false;
		}

		@Override
		public boolean isEnabled(int arg0) {
			// TODO Auto-generated method stub
			return false;
		}
	}

}
